{
  "name": "jshashes",
  "description": "A fast and independent hashing library pure JavaScript implemented (ES3 compliant) for both server and client side (MD5, SHA1, SHA256, SHA512, RIPEMD, HMAC and Base64)",
  "keywords": [
    "hash",
    "md5",
    "sha1",
    "sha256",
    "hashes",
    "sha512",
    "RIPEMD",
    "base64",
    "hmac",
    "crc",
    "encoding",
    "algorithm"
  ],
  "version": "1.0.4",
  "maintainers": [
    {
      "name": "Tomas Aparicio",
      "email": "tomas@aparicio.me",
      "url": "http://tomas.aparicio.me"
    }
  ],
  "contributors": [
    {
      "name": "C. Scott Ananian",
      "email": "cscott@cscott.net",
      "url": "http://cscott.net"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/h2non/jshashes.git"
  },
  "homepage": "https://github.com/h2non/jshashes",
  "dependencies": {},
  "devDependencies": {
    "mocha": "~1.9.0"
  },
  "bugs": {
    "url": "http://github.com/h2non/jshashes/issues"
  },
  "engines": {
    "node": "*",
    "browser": "*"
  },
  "main": "hashes",
  "bin": {
    "hashes": "./bin/cli.js"
  },
  "licenses": [
    {
      "type": "New BSD",
      "url": "http://github.com/h2non/jshashes/raw/master/LICENSE"
    }
  ],
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "mocha"
  },
  "demos": [
    "/examples/client/hexadecimal.html",
    "/examples/client/benchmark.html"
  ],
  "readme": "# jsHashes \n\nA fast and independent hashing library pure JavaScript implemented for both server and client side\n\n# About\n\n`jsHashes` is a pure JavaScript implementation of the most extended hash algorithms.\nIts goal is to provide an independent, fast and easy solution for hash algorithms both for client-side and server-side JavaScript environments.\nThe code is fully compatible with the ECMAScript language specification version 3 and was tested in all major browsers (client-side) and node.js (server-side).   \n\nIf you are looking for a high low-level performance on the server-side, note that Node.js provides its own C++ native module ([Crypto](http://nodejs.org/api/crypto.html)).\n\n## Supported hash algorithms\n\n* `MD5` (<http://www.ietf.org/rfc/rfc1321.txt>)\n* `SHA1` (<http://www.itl.nist.gov/fipspubs/fip180-1.htm>)\n* `SHA256` (<http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf>)\n* `SHA512` (<http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf>)\n* `HMAC` (<http://www.ietf.org/rfc/rfc2104.txt>)\n* `RIPEMD-160` (<http://homes.esat.kuleuven.be/~bosselae/ripemd160.html>)\n\n**Aditional functionalities**\n\n* `Base64 encoding/decoding` (<http://tools.ietf.org/html/rfc3548>)\n* `CRC-32 calculation`\n* `UTF-8 encoding/decoding`\n\n## Environments\n\n- Browser (ES5)\n- Node.js (all versions)\n- Rhino\n- RingoJS\n\n## Usage\n\nFollowing some software design patterns, `jsHashes` implements an object-oriented class-based paradigm for an easy and clean use. \nEach algorithm has its respective own `class`, providing encapsulation and low coupling between classes.\n\nHere you can see an example of how to create a new instance for each algorithm:\n\n```javascript\n// new MD5 instance\nvar MD5 = new Hashes.MD5;\n// new SHA1 instance\nvar SHA1 = new Hashes.SHA1;\n// new SHA256 instance\nvar SHA256 =  new Hashes.SHA256;\n// new SHA512 instace\nvar SHA512 = new Hashes.SHA512;\n// new RIPEMD-160 instace\nvar RMD160 = new Hashes.RMD160; \n```\n\nNow, an example of how to output an hexadecimal-based hash encoding for each algorithm (client-side):\n\n```javascript\n// sample string\nvar str = 'Sample text!';\n// output to console\nconsole.log('MD5: ' + MD5.hex(str));\nconsole.log('SHA1: ' + SHA1.hex(str));\nconsole.log('SHA256: ' + SHA256.hex(str));\nconsole.log('SHA512: ' + SHA512.hex(str));\nconsole.log('RIPEMD-160: ' + RMD160.hex(str));\n```\n\n### Client-Side\n\nThis is a simple implementation for a client-side environment:\n\n```html\n<html>\n<head>\n<script type=\"text/javascript\" src=\"src/hashes.js\"></script>\n<script type=\"text/javascript\">\n// sample string \nvar str = 'This is a sample text!';\n// new MD5 instance and hexadecimal string encoding\nvar MD5 = new Hashes.MD5().hex(str);\n// output into DOM\ndocument.write('<p>MD5: <b>' + MD5 + '</b></p>');\n</script>\n</head>\n<body>\n</body>\n</html>\n```\n\n### CLI\n\nYou can use the simple command-line interface to generate hashes.\n\n```bash\n$ hashes sha1-hex This is a sample string\n> b6a8501d8a70e74e1dc12a6082102622fdc719bb\n\n# or with quotes\n$ hashes sha1-hex \"This is a sample string\"\n> b6a8501d8a70e74e1dc12a6082102622fdc719bb\n```\n\nFor more information about the options supported, type:\n\n```bash\n$ hashes -h\n```\n\n### Module\n\nThe library is based on CommonJS module standard, so the same code works in [Node](http://nodejs.org) and other environments.\n\n`jsHashes` is available via NPM. You can install it simply doing:\n\n```\n$ npm install jshashes\n```\n\nAdditionally, you can get jsHashes using [Bower](http://twitter.github.com/bower/) or [Jam](http://jamjs.org/) package managers.\n\n```\n$ bower install jshashes\n```\n\n```\n$ jam install jshashes\n```\n\nA Node.js example:\n\n```javascript\n// require the module\nvar Hashes = require('jshashes');\n// sample string\nvar str = 'This is a sample text!';\n// new SHA1 instance and base64 string encoding\nvar SHA1 = new Hashes.SHA1().b64(str);\n// output to console\nconsole.log('SHA1: ' + SHA1);\n```\n\n## Public methods\nEach algorithm `class` provides the following public methods:\n\n* `hex(string)` - Hexadecimal hash encoding from string. \n* `b64(string)` - Base64 hash encondig from string.\n* `any(string,encoding)` - Custom hash algorithm values encoding.\n* `hex_hmac(key,string)` - Hexadecimal hash with HMAC salt key.\n* `b64_hmac(key,string)` - Base64 hash with HMAC salt key.\n* `any_hmac(key,string,encoding)` - Custom hash values encoding with HMAC salt key support.\n* `vm_test()` - Simple self-test to see is working. Returns `this` Object.\n* `setUpperCase(boolean)` - Enable/disable uppercase hexadecimal returned string. Returns `this` Object. \n* `setPad(string)` - Defines a custom base64 pad string. Default is '=' according with the RFC standard. Returns `this` Object.\n* `setUTF8(boolean)` - Enable/disable UTF-8 character encoding. Returns `this` Object.\n\n## Hash encoding formats supported\n\n* Hexadecimal (most extended)\n* Base64\n* Custom hash values `any()` method\n\n## Benchmark\n\nNode.js 0.6.18 running on a VPS Intel I7 930 with 512 MB of RAM (see `server/benchmark.js`) \n\n```javascript\nSimple benchmark test generating 10000 hashes for each algorithm.\nString: \"A0gTtNtKh3RaduBfIo59ZdfTc5pTdOQrkxdZ5EeVOIZh1cXxqPyexKZBg6VlE1KzIz6pd6r1LLIpT5B8THRfcGvbJElwhWBi9ZAE\"\n\n* MD5\n** Done in: 205 miliseconds\n* SHA1\n** Done in: 277 miliseconds\n* SHA256\n** Done in: 525 miliseconds\n* SHA512\n** Done in: 593 miliseconds\n* RMD160\n** Done in: 383 miliseconds\n```\n\nSee `client/benchmark.html` for client-side.\n\n## Notes\n\n* Don't support checksum hash for files on the server-side, only strings-based inputs are supported.\n* It has not been planned to include support for more hash algorithms.\n* The goal is to provide the same JavaScript code in both server and client side, so it isn't planned to improve it in other ways. \n* Only Node.js server-side was tested, so with minimal changes, you can setup `jsHashes` in other server-side JS environment.\n\n## Changelog\n\n* `1.0.4`\n  - Fix CLI script call error when use it from Bash\n  - Added CLI usage example\n* `1.0.3`\n  - Important bugfixes to UTF-8 encoding (broken in 1.0.2) and the RIPEMD-160 hash (broken in 1.0.1). (gh #6)\n  - New test suite for hashes, CRC32, and hmac; run with 'npm test' in node. \n  - Fixed global variable leaks. (gh #13) \n  - CRC32 will now always return positive values. (gh #11)\n  - Added package version property to the exposed Hashes Object\n  - Updated CLI script utility supporting all algorithms (see bin/hashes)\n  - Fixed UTF-8 encoding/decoding error (if input parameter is undefined or invalid)\n* `1.0.2`\n  - Performance improvements and minimal refactor (length property caching, literal notation)\n  - Available from Bower package manager\n* `1.0.1`\n  - Refactoring (hoisting, coercion, removed redundant functions, scoping, restructure...)\n  - Performance improves\n  - JSLint validation (except bitwise operators)\n  - Now the library can be used like a AMD CommonJS module\n  - Updated documentation\n  - New folders structure\n  - Added closure compiled and minimized library version\n  - Available from Jam package manager\n* `0.1.5b`\n  - Added index.js for easy call the module in Node.js\n  - Updated documentation\n* `0.1.4b`\n  - Now declaring objects using Literal Notation.\n  - Solved sintax errors on minimized version (jshashes.min.js)\n  - Added benchmark test and sample\n* `0.1.3b`\n  - Starting non-redundancy code refactorization\n  - Added `Helpers` Object with some global functions\n  - Added native support for Base64 provided as `class`\n  - Added CRC-32 calculation support\n  - Added URL encode/decode helpers functions \n* `0.1.2b` \n  - SHA1 error fixed. \n  - General code changes (renaming classes, private methods, new methods...). \n  - Changing library namespace to 'Hashes'. \n  - Starting code documentation. \n  - Added new examples of how to use. \n* `0.1.1b` \n  - Minimal library improvements. \n  - There has been added some samples, like how to use it and support for NPM package.\n* `0.1.0b` \n  - First release: the code is stable, but the library is still beta and must be improved and documented.\n  \n## TODO\n\n* Performance benchmarking\n\n## Authors \n\n### Library author\n\n* [Tomas Aparicio](https://github.com/h2non/)\n\n### Original algorithm authors\n\n* [Paul Johnston](http://pajhome.org.uk/crypt/md5/)\n* Angel Marin (SHA256)\n* Jeremy Lin (RIPEMD-160)\n\n### Other contributors\n\n* [C. Scott Ananian](https://github.com/cscott)\n* Greg Holt\n* Andrew Kepert\n* Ydnar\n* Lostinet\n\n## License\n\njsHashes is released under `New BSD` license. See `LICENSE` file.\n\n## Issues\n\nFeel free to report any issue you experiment via Github <https://github.com/h2non/jsHashes/issues>.\n",
  "_id": "jshashes@1.0.4",
  "dist": {
    "shasum": "d3c04459844b6d66fdc1f706ca1ed68cb1379bb4"
  },
  "_from": "jshashes"
}

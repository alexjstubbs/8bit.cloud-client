network={
	ssid="simple"
	psk="very secret passphrase"
	priority=5
}

## Example advanced configurations. Remove the hash (#) to enable line by line 

## Simple case: WPA-PSK, PSK as an ASCII passphrase, allow all valid ciphers

#network={
#	ssid="simple"
#	psk="very secret passphrase"
#	priority=5
#}

## Same as previous, but request SSID-specific scanning (for APs that reject broadcast SSID)

#network={
#	ssid="second ssid"
#	scan_ssid=1
#	psk="very secret passphrase"
#	priority=2
#}

## Only WPA-PSK is used. Any valid cipher combination is accepted.

#network={
#	ssid="example"
#	proto=WPA
#	key_mgmt=WPA-PSK
#	pairwise=CCMP TKIP
#	group=CCMP TKIP WEP104 WEP40
#	psk=06b4be19da289f475aa46a33cb793029d4ab3db7a23ee92382eb0106c72ac7bb
#	priority=2
#}

## WPA-Personal(PSK) with TKIP and enforcement for frequent PTK rekeying

#network={
#	ssid="example"
#	proto=WPA
#	key_mgmt=WPA-PSK
#	pairwise=TKIP
#	group=TKIP
#	psk="not so secure passphrase"
#	wpa_ptk_rekey=600
#}

## Only WPA-EAP is used. Both CCMP and TKIP is accepted. An AP that used WEP104 or WEP40 as the group cipher will not be accepted.

#network={
#	ssid="example"
#	proto=RSN
#	key_mgmt=WPA-EAP
#	pairwise=CCMP TKIP
#	group=CCMP TKIP
#	eap=TLS
#	identity="user@example.com"
#	ca_cert="/etc/cert/ca.pem"
#	client_cert="/etc/cert/user.pem"
#	private_key="/etc/cert/user.prv"
#	private_key_passwd="password"
#	priority=1
#}

## EAP-PEAP/MSCHAPv2 configuration for RADIUS servers that use the new peaplabel (e.g., Radiator)

#network={
#	ssid="example"
#	key_mgmt=WPA-EAP
#	eap=PEAP
#	identity="user@example.com"
#	password="foobar"
#	ca_cert="/etc/cert/ca.pem"
#	phase1="peaplabel=1"
#	phase2="auth=MSCHAPV2"
#	priority=10
#}

## EAP-TTLS/EAP-MD5-Challenge configuration with anonymous identity for the unencrypted use. Real identity is sent only within an encrypted TLS tunnel.

#network={
#	ssid="example"
#	key_mgmt=WPA-EAP
#	eap=TTLS
#	identity="user@example.com"
#	anonymous_identity="anonymous@example.com"
#	password="foobar"
#	ca_cert="/etc/cert/ca.pem"
#	priority=2
#}

## EAP-TTLS/MSCHAPv2 configuration with anonymous identity for the unencrypted use. Real identity is sent only within an encrypted TLS tunnel.

#network={
#	ssid="example"
#	key_mgmt=WPA-EAP
#	eap=TTLS
#	identity="user@example.com"
#	anonymous_identity="anonymous@example.com"
#	password="foobar"
#	ca_cert="/etc/cert/ca.pem"
#	phase2="auth=MSCHAPV2"
#}

## WPA-EAP, EAP-TTLS with different CA certificate used for outer and inner authentication.

#network={
#	ssid="example"
#	key_mgmt=WPA-EAP
#	eap=TTLS
#	# Phase1 / outer authentication
#	anonymous_identity="anonymous@example.com"
#	ca_cert="/etc/cert/ca.pem"
#    # Phase 2 / inner authentication
#	phase2="autheap=TLS"
#	ca_cert2="/etc/cert/ca2.pem"
#	client_cert2="/etc/cer/user.pem"
#	private_key2="/etc/cer/user.prv"
#	private_key2_passwd="password"
#	priority=2
#}

## Both WPA-PSK and WPA-EAP is accepted. Only CCMP is accepted as pairwise and group cipher.

#network={
#	ssid="example"
#	bssid=00:11:22:33:44:55
#	proto=WPA RSN
#	key_mgmt=WPA-PSK WPA-EAP
#	pairwise=CCMP
#	group=CCMP
#	psk=06b4be19da289f475aa46a33cb793029d4ab3db7a23ee92382eb0106c72ac7bb
#}

## Special characters in SSID, so use hex string. Default to WPA-PSK, WPA-EAP and all valid ciphers.

#network={
#	ssid=00010203
#	psk=000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f
#}


## EAP-SIM with a GSM SIM or USIM

#network={
#	ssid="eap-sim-test"
#	key_mgmt=WPA-EAP
#	eap=SIM
#	pin="1234"
#	pcsc=""
#}


## EAP-PSK

#network={
#	ssid="eap-psk-test"
#	key_mgmt=WPA-EAP
#	eap=PSK
#	anonymous_identity="eap_psk_user"
#	password=06b4be19da289f475aa46a33cb793029
#	identity="eap_psk_user@example.com"
#}


## IEEE 802.1X/EAPOL with dynamically generated WEP keys (i.e., no WPA) using EAP-TLS for authentication and key generation; require both unicast and broadcast WEP keys.

#network={
#	ssid="1x-test"
#	key_mgmt=IEEE8021X
#	eap=TLS
#	identity="user@example.com"
#	ca_cert="/etc/cert/ca.pem"
#	client_cert="/etc/cert/user.pem"
#	private_key="/etc/cert/user.prv"
#	private_key_passwd="password"
#	eapol_flags=3
#}


## LEAP with dynamic WEP keys

#network={
#	ssid="leap-example"
#	key_mgmt=IEEE8021X
#	eap=LEAP
#	identity="user"
#	password="foobar"
#}

## EAP-IKEv2 using shared secrets for both server and peer authentication

#network={
#	ssid="ikev2-example"
#	key_mgmt=WPA-EAP
#	eap=IKEV2
#	identity="user"
#	password="foobar"
#}

## EAP-FAST with WPA (WPA or WPA2)

#network={
#	ssid="eap-fast-test"
#	key_mgmt=WPA-EAP
#	eap=FAST
#	anonymous_identity="FAST-000102030405"
#	identity="username"
#	password="password"
#	phase1="fast_provisioning=1"
#	pac_file="/etc/wpa_supplicant.eap-fast-pac"
#}

#network={
#	ssid="eap-fast-test"
#	key_mgmt=WPA-EAP
#	eap=FAST
#	anonymous_identity="FAST-000102030405"
#	identity="username"
#	password="password"
#	phase1="fast_provisioning=1"
#	pac_file="blob://eap-fast-pac"
#}

## Plaintext connection (no WPA, no IEEE 802.1X)

#network={
#	ssid="plaintext-test"
#	key_mgmt=NONE
#}


## Shared WEP key connection (no WPA, no IEEE 802.1X)

#network={
#	ssid="static-wep-test"
#	key_mgmt=NONE
#	wep_key0="abcde"
#	wep_key1=0102030405
#	wep_key2="1234567890123"
#	wep_tx_keyidx=0
#	priority=5
#}


## Shared WEP key connection (no WPA, no IEEE 802.1X) using Shared Key IEEE 802.11 authentication

#network={
#	ssid="static-wep-test2"
#	key_mgmt=NONE
#	wep_key0="abcde"
#	wep_key1=0102030405
#	wep_key2="1234567890123"
#	wep_tx_keyidx=0
#	priority=5
#	auth_alg=SHARED
#}


## IBSS/ad-hoc network with RSN

#network={
#	ssid="ibss-rsn"
#	key_mgmt=WPA-PSK
#	proto=RSN
#	psk="12345678"
#	mode=1
#	frequency=2412
#	pairwise=CCMP
#	group=CCMP
#}

## IBSS/ad-hoc network with WPA-None/TKIP (deprecated)

#network={
#	ssid="test adhoc"
#	mode=1
#	frequency=2412
#	proto=WPA
#	key_mgmt=WPA-NONE
#	pairwise=NONE
#	group=TKIP
#	psk="secret passphrase"
#}

## open mesh network

#network={
#	ssid="test mesh"
#	mode=5
#	frequency=2437
#	key_mgmt=NONE
#}

## secure (SAE + AMPE) network

#network={
#	ssid="secure mesh"
#	mode=5
#	frequency=2437
#	key_mgmt=SAE
#	psk="very secret passphrase"
#}


## Catch all example that allows more or less all configuration modes

#network={
#	ssid="example"
#	scan_ssid=1
#	key_mgmt=WPA-EAP WPA-PSK IEEE8021X NONE
#	pairwise=CCMP TKIP
#	group=CCMP TKIP WEP104 WEP40
#	psk="very secret passphrase"
#	eap=TTLS PEAP TLS
#	identity="user@example.com"
#	password="foobar"
#	ca_cert="/etc/cert/ca.pem"
#	client_cert="/etc/cert/user.pem"
#	private_key="/etc/cert/user.prv"
#	private_key_passwd="password"
#	phase1="peaplabel=0"
#}

## Example of EAP-TLS with smartcard (openssl engine)

#network={
#	ssid="example"
#	key_mgmt=WPA-EAP
#	eap=TLS
#	proto=RSN
#	pairwise=CCMP TKIP
#	group=CCMP TKIP
#	identity="user@example.com"
#	ca_cert="/etc/cert/ca.pem"
#	client_cert="/etc/cert/user.pem"
#
#	engine=1

	## The engine configured here must be available. Look at
	## OpenSSL engine support in the global section.
	## The key available through the engine must be the private key
	## matching the client certificate configured above.

	## use the opensc engine
	#engine_id="opensc"
	#key_id="45"

	## use the pkcs11 engine
	#engine_id="pkcs11"
	#key_id="id_45"

	## Optional PIN configuration; this can be left out and PIN will be
	## asked through the control interface
	#pin="1234"
#}

## Example configuration showing how to use an inlined blob as a CA certificate data instead of using external file

#network={
#	ssid="example"
#	key_mgmt=WPA-EAP
#	eap=TTLS
#	identity="user@example.com"
#	anonymous_identity="anonymous@example.com"
#	password="foobar"
#	ca_cert="blob://exampleblob"
#	priority=20
#}

#blob-base64-exampleblob={
#SGVsbG8gV29ybGQhCg==
#}


## Wildcard match for SSID (plaintext APs only). This example select any open AP regardless of its SSID.

#network={
#	key_mgmt=NONE
#}


## Example config file that will only scan on channel 36.

#freq_list=5180
#network={
#	key_mgmt=NONE
#}


## Example MACsec configuration
#network={
#	key_mgmt=IEEE8021X
#	eap=TTLS
#	phase2="auth=PAP"
#	anonymous_identity="anonymous@example.com"
#	identity="user@example.com"
#	password="secretr"
#	ca_cert="/etc/cert/ca.pem"
#	eapol_flags=0
#	macsec_policy=1
#}
